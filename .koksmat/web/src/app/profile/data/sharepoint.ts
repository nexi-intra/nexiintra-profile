


import { NewsChannel,Country, Unit, NewsCategory, ValidGuestDomain } from "./schemas";
import { https } from "@/koksmat/httphelper";
import { Root } from "../actions/onboarding";


// Generated by https://transform.tools/json-to-typescript


export interface NewsChannelFields {
  "@odata.etag": string
  Title: string
  LinkTitle: string
  RelevantUnits: LookupValue[]
  Mandatory?: boolean
  RelevantCountires: LookupValue[]
  RegionLookupId?: string
  NewsCategoryLookupId: string
  GroupID?: string
  Email?: string
 
  id: string
  ContentType: string
  Modified: string
  Created: string
  AuthorLookupId: string
  EditorLookupId: string
  _UIVersionString: string
  Attachments: boolean
  Edit: string
  LinkTitleNoMenu: string
  ItemChildCount: string
  FolderChildCount: string
  _ComplianceFlags: string
  _ComplianceTag: string
  _ComplianceTagWrittenTime: string
  _ComplianceTagUserId: string
  _IsRecord?: string
}


export interface UnitFields {
  "@odata.etag": string
  Title: string
  LinkTitle: string
  code: string
  SortOrder: number
  UnitType: string
  id: string
  ContentType: string
  Modified: string
  Created: string
  AuthorLookupId: string
  EditorLookupId: string
  _UIVersionString: string
  Attachments: boolean
  Edit: string
  LinkTitleNoMenu: string
  ItemChildCount: string
  FolderChildCount: string
  _ComplianceFlags: string
  _ComplianceTag: string
  _ComplianceTagWrittenTime: string
  _ComplianceTagUserId: string
  _IsRecord: string
}

export interface CountryFields {
  "@odata.etag": string
  Title: string
  LinkTitle: string

  Region_x0020_ItemLookupId: string
  Region_x0020_Item_x003a_Sort_x00LookupId: string
  id: string
  ContentType: string
  Modified: string
  Created: string
  AuthorLookupId: string
  EditorLookupId: string
  _UIVersionString: string
  Attachments: boolean
  Edit: string
  LinkTitleNoMenu: string
  ItemChildCount: string
  FolderChildCount: string
  _ComplianceFlags: string
  _ComplianceTag: string
  _ComplianceTagWrittenTime: string
  _ComplianceTagUserId: string
  _IsRecord?: string
}

export interface NewsCategoryFields {
  "@odata.etag": string
  Title: string
  LinkTitle: string
  SortOrder: number
  id: string
  ContentType: string
  Modified: string
  Created: string
  AuthorLookupId: string
  EditorLookupId: string
  _UIVersionString: string
  Attachments: boolean
  Edit: string
  LinkTitleNoMenu: string
  ItemChildCount: string
  FolderChildCount: string
  _ComplianceFlags: string
  _ComplianceTag: string
  _ComplianceTagWrittenTime: string
  _ComplianceTagUserId: string
}

export interface ValidGuestDomainFields {
  "@odata.etag": string
  Title: string
  LinkTitle: string
  RedirectTo: string
  id: string
  ContentType: string
  Modified: string
  Created: string
  AuthorLookupId: string
  EditorLookupId: string
  _UIVersionString: string
  Attachments: boolean
  Edit: string
  LinkTitleNoMenu: string
  ItemChildCount: string
  FolderChildCount: string
  _ComplianceFlags: string
  _ComplianceTag: string
  _ComplianceTagWrittenTime: string
  _ComplianceTagUserId: string
  _IsRecord: string
}

export interface LookupValue {
  LookupId: number
  LookupValue: string
}

export async function getValidGuestDomains(accessToken: string) {
  const items = await https<Root<ItemHeader<ValidGuestDomainFields>>>(accessToken, "GET",
    `https://graph.microsoft.com/v1.0/sites/christianiabpos.sharepoint.com:/sites/nexiintra-home:/lists/Valid%20Guest%20Domains/items?$expand=fields`);
  const domains = items.data?.value.map((item) => {
    const { fields } = item;
    const domain: ValidGuestDomain = {
     domainName: fields.Title,
      redirectURL: fields.RedirectTo
    };
    return domain;
  });
  return domains;
}

export async function getCountries(accessToken: string) {
  const items = await https<Root<ItemHeader<CountryFields>>>(accessToken, "GET",
    `https://graph.microsoft.com/v1.0/sites/christianiabpos.sharepoint.com:/sites/nexiintra-home:/lists/Countries/items?$expand=fields`);
  const units = items.data?.value.map((item) => {
    const { fields } = item;
    const country: Country = {
      countryName: fields.Title,
      countryCode: fields.Title,
     
    };
    return country;
  });
  return units;
}

export async function getNewsCategories(accessToken: string) {
  const items = await https<Root<ItemHeader<NewsCategoryFields>>>(accessToken, "GET",
    `https://graph.microsoft.com/v1.0/sites/christianiabpos.sharepoint.com:/sites/nexiintra-home:/lists/News%20Categories/items?$expand=fields`);
  const units = items.data?.value.map((item) => {
    const { fields } = item;
    const newsCategory: NewsCategory = {
      categoryName: fields.Title,
      categoryId: parseInt(fields.id),
      sortOrder: fields.SortOrder
    };
    return newsCategory;
  });
  return units;
}

export async function getUnits(accessToken: string) {
  const items = await https<Root<ItemHeader<UnitFields>>>(accessToken, "GET",
    `https://graph.microsoft.com/v1.0/sites/christianiabpos.sharepoint.com:/sites/nexiintra-home:/lists/Units/items?$expand=fields`);
  const units = items.data?.value.map((item) => {
    const { fields } = item;
    const unit: Unit = {
      unitName: fields.Title,
      unitCode: fields.Title,
      unitType: fields.UnitType,
      sortOrder: fields.SortOrder,
    };
    return unit;
  });
  return units;
}

const lookupValues = (values:LookupValue[]) => {
  return values.map((value) => {
    return {LookupId: value.LookupId, LookupValue:value.LookupValue}
  }    );
}



export async function getNewsChannels(accessToken: string) {
  const items = await https<Root<ItemHeader<NewsChannelFields>>>(accessToken, "GET",
    `https://graph.microsoft.com/v1.0/sites/christianiabpos.sharepoint.com:/sites/nexiintra-home:/lists/News Channels/items?$expand=fields`);
  const channels = items.data?.value.map((item) => {
    const { fields } = item;
    
    const channel: NewsChannel = {
      id : item.id,

      sortOrder: fields.Title,
      channelName: fields.Title,
      channelType: fields.Title,
      channelCode: fields.Title,
      GroupId: fields.GroupID ?? "",
      RelevantUnits: lookupValues(fields.RelevantUnits),
      Mandatory: fields.Mandatory ?? false,
      RelevantCountires: lookupValues(fields.RelevantCountires),
      RegionId: parseInt(fields.RegionLookupId ?? "0"),
      NewsCategoryId: parseInt(fields.NewsCategoryLookupId ?? "0"),
    };
    return channel;
  });
  return channels;
}


export interface SiteCollection {
  hostname: string;
}

export interface ItemHeader<T> {
  "@odata.etag": string
  createdDateTime: string
  eTag: string
  id: string
  lastModifiedDateTime: string
  webUrl: string
  createdBy: CreatedBy
  lastModifiedBy: LastModifiedBy
  parentReference: ParentReference
  contentType: ContentType
  "fields@odata.context": string
  fields: T
}

export interface CreatedBy {
  user: User
}

export interface User {
  email: string
  id: string
  displayName: string
}

export interface LastModifiedBy {
  user: User
}



export interface ParentReference {
  id: string
  siteId: string
}

export interface ContentType {
  id: string
  name: string
}